#!/usr/bin/env python
# -*- coding: utf-8 -*-

################################################################################
# Copyright 2018 ROBOTIS CO., LTD.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
################################################################################

# Author: Leon Jung, Gilbert

import rospy
import numpy as np

from enum import Enum
from std_msgs.msg import UInt8
from geometry_msgs.msg import Twist
from turtlebot3_autorace_msgs.msg import MovingParam
## from turtlebot3_msgs.msg import movingParam

class CoreModeDecider():
    def __init__(self):
        # subscribes : invoking object detected

        #intersection
        self.sub_traffic_sign = rospy.Subscriber('/detect/traffic_sign', UInt8, self.cbInvokedByTrafficSign, queue_size=1)
        self.pub_cmd_vel = rospy.Publisher('/cmd_vel', Twist, queue_size = 1)
        self.pub_moving = rospy.Publisher('/control/moving/state', MovingParam, queue_size= 1)



        self.sub_traffic_light = rospy.Subscriber('/detect/traffic_light', UInt8, self.cbInvokedByTrafficLight, queue_size=1)
        self.sub_returned_mode = rospy.Subscriber('/core/returned_mode', UInt8, self.cbReturnedMode, queue_size=1)

        self.sub_traffic_line = rospy.Subscriber('/detect/traffic_line', UInt8, self.cbInvokedByTrafficLine, queue_size=1)

        self.pub_debug = rospy.Publisher('/core/debug', UInt8, queue_size = 1)
        # publishes : decided mode
        self.pub_decided_mode = rospy.Publisher('/core/decided_mode', UInt8, queue_size=1)

        self.InvokedObject = Enum('InvokedObject', 'traffic_line traffic_sign traffic_light')#, 'traffic_line traffic_sign')
        
        '''construction
        self.InvokedObject = Enum('InvokedObject', 'traffic_sign traffic_light traffic_line')
        self.TrafficSign = Enum('TrafficSign', 'divide stop parking tunnel left right no_entry construction')
        self.CurrentMode = Enum('CurrentMode', 'idle lane_following traffic_light parking_lot level_crossing tunnel construction')
        '''

        self.TrafficSign = Enum('TrafficSign', 'divide left right stop parking tunnel no_entry construction')#,'divide left right')
        self.CurrentMode = Enum(
            'CurrentMode', 'idle lane_following traffic_light intersection construction parking_lot level_crossing tunnel')

        self.fnInitMode()
        self.fnInitSelf()

      # Invoke if traffic light is detected
    def cbInvokedByTrafficLight(self, traffic_light_type_msg):
        rospy.loginfo("invoke light")
        self.fnDecideMode(self.InvokedObject.traffic_light.value, traffic_light_type_msg)
        rospy.loginfo("Traffic light detected")

      # Invoke if traffic sign is detected	
    def cbInvokedByTrafficSign(self, traffic_sign_type_msg):	
        rospy.loginfo("invoke sign : {}".format(traffic_sign_type_msg))	

        self.fnDecideMode(self.InvokedObject.traffic_sign.value, traffic_sign_type_msg)	
        rospy.loginfo("Traffic sign detected")

    def cbInvokedByTrafficLine(self, traffic_line_type_msg):
        rospy.loginfo("invoke line")
        self.fnDecideMode(self.InvokedObject.traffic_line.value, traffic_line_type_msg)
        rospy.loginfo("Traffic line detected")

    '''construction    
    # Invoke if traffic sign is detected
    def cbInvokedByTrafficSign(self, traffic_sign_type_msg):
        rospy.loginfo("invoke sign")       
        self.fnDecideMode(self.InvokedObject.traffic_sign.value, traffic_sign_type_msg)
    '''
    def cbReturnedMode(self, mode):
        rospy.loginfo("Init Mode")
        self.fnInitMode()

    def fnInitMode(self):                                                   # starts only when the program is started initially or any mission is completed
        self.current_mode = self.CurrentMode.lane_following.value
        self.fnPublishMode()
        rospy.loginfo("Current Mode : Idle")
        '''construction
        self.current_mode = self.CurrentMode.lane_following.value
        rospy.loginfo("Current Mode : construction")
        '''

    def fnInitSelf(self):
        rospy.loginfo("Init")
        self.current_mode = self.CurrentMode.traffic_light.value

    def fnDecideMode(self, invoked_object, msg_data):                       # starts only when the traffic sign / traffic light is detected & current_mode is lane_following
        if self.current_mode == self.CurrentMode.lane_following.value:
            if invoked_object == self.InvokedObject.traffic_light.value:    # Traffic Light detected
                rospy.loginfo("traffic_light_following") 
                self.current_mode = self.CurrentMode.traffic_light.value
            elif invoked_object == self.InvokedObject.traffic_sign.value:
                rospy.loginfo("Any Sign detected")	
                rospy.loginfo(msg_data.data)
                if msg_data.data == self.TrafficSign.left.value:          # left sign deteced	
                    self.current_mode = self.CurrentMode.intersection.value	
                    rospy.loginfo("detect sign : left_sign")  	
                elif msg_data.data == self.TrafficSign.right.value:       # right sign deteced	
                    self.current_mode = self.CurrentMode.intersection.value	
                    rospy.loginfo("detect sign : right_sign")
                    
                elif msg_data.data == self.TrafficSign.construction.value:
                    rospy.loginfo("currentmode : construction detected")
                    self.current_mode = self.CurrentMode.construction.value
                elif msg_data.data == self.TrafficSign.parking.value:         # Parking Sign detected
                    rospy.loginfo("currentmode : parking_lot detected")
                    self.current_mode = self.CurrentMode.parking_lot.value
                    
                elif msg_data.data == self.TrafficSign.stop.value:            # Stop Sign detected
                    rospy.loginfo("level crossing")
                    self.current_mode = self.CurrentMode.level_crossing.value    
                    
                elif msg_data.data == self.TrafficSign.tunnel.value:      # Tunnel Sign detected
                    rospy.loginfo("traffic sign : tunnel sign")
                    self.current_mode = self.CurrentMode.tunnel.valu

            else:
                pass

            self.fnPublishMode()

        elif self.current_mode == self.CurrentMode.traffic_light.value:
            if invoked_object == self.InvokedObject.traffic_light.value:
                self.current_mode = self.CurrentMode.lane_following.value
                self.fnPublishMode()

        '''construction
        if self.current_mode == self.CurrentMode.lane_following.value:
            rospy.loginfo("currentmode : lane following")         
            if invoked_object == self.InvokedObject.traffic_sign.value:    # Any Sign detected
                rospy.loginfo("currentmode : any sign detected")
                if msg_data.data == self.TrafficSign.construction.value:
                    rospy.loginfo("currentmode : construction detected")
                    self.current_mode = self.CurrentMode.construction.value
                
            else:
                pass
            self.fnPublishMode()
        '''



    def fnPublishMode(self):
        decided_mode = UInt8()
        decided_mode.data = self.current_mode
        self.pub_decided_mode.publish(decided_mode)

    def main(self):
        rospy.spin()

if __name__ == '__main__':
    rospy.init_node('core_mode_decider')
    node = CoreModeDecider()
    node.main()
